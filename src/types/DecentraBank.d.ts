/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DecentraBankInterface extends ethers.utils.Interface {
  functions: {
    "DC()": FunctionFragment;
    "DD()": FunctionFragment;
    "DS()": FunctionFragment;
    "MAX_WEIGHT()": FunctionFragment;
    "addNewCollateralType(address)": FunctionFragment;
    "calculatePoolBal()": FunctionFragment;
    "calculatePurchase(uint256)": FunctionFragment;
    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "calculateSale(uint256)": FunctionFragment;
    "calculateSaleReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "collateralCount()": FunctionFragment;
    "collateralTypes(uint256)": FunctionFragment;
    "connectorWeight()": FunctionFragment;
    "divisor()": FunctionFragment;
    "fractionalReserveValue()": FunctionFragment;
    "fundWithdrawl(address,uint256,uint256)": FunctionFragment;
    "lockedBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "percent()": FunctionFragment;
    "purchaseStock(uint256,uint256)": FunctionFragment;
    "refundRatio()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellStock(uint256)": FunctionFragment;
    "setUp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DC", values?: undefined): string;
  encodeFunctionData(functionFragment: "DD", values?: undefined): string;
  encodeFunctionData(functionFragment: "DS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNewCollateralType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePoolBal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchaseReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSaleReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectorWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "divisor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fractionalReserveValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundWithdrawl",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "percent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseStock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellStock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNewCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePoolBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchaseReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divisor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fractionalReserveValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundWithdrawl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "percent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellStock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "FundWithdrawl(uint256,address)": EventFragment;
    "NewCollateral(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StockPurchased(uint256,uint256,address)": EventFragment;
    "StockSold(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundWithdrawl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StockPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StockSold"): EventFragment;
}

export class DecentraBank extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DecentraBankInterface;

  functions: {
    DC(overrides?: CallOverrides): Promise<[string]>;

    "DC()"(overrides?: CallOverrides): Promise<[string]>;

    DD(overrides?: CallOverrides): Promise<[string]>;

    "DD()"(overrides?: CallOverrides): Promise<[string]>;

    DS(overrides?: CallOverrides): Promise<[string]>;

    "DS()"(overrides?: CallOverrides): Promise<[string]>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<[number]>;

    "MAX_WEIGHT()"(overrides?: CallOverrides): Promise<[number]>;

    addNewCollateralType(
      _collateral: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addNewCollateralType(address)"(
      _collateral: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculatePoolBal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calculatePoolBal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePurchase(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculatePurchase(uint256)"(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSale(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSale(uint256)"(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "collateralTypes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectorWeight(overrides?: CallOverrides): Promise<[number]>;

    "connectorWeight()"(overrides?: CallOverrides): Promise<[number]>;

    divisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "divisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fractionalReserveValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fractionalReserveValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundWithdrawl(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fundWithdrawl(address,uint256,uint256)"(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockedBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    percent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "percent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseStock(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseStock(uint256,uint256)"(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    refundRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "refundRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sellStock(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellStock(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUp(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "setUp()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DC(overrides?: CallOverrides): Promise<string>;

  "DC()"(overrides?: CallOverrides): Promise<string>;

  DD(overrides?: CallOverrides): Promise<string>;

  "DD()"(overrides?: CallOverrides): Promise<string>;

  DS(overrides?: CallOverrides): Promise<string>;

  "DS()"(overrides?: CallOverrides): Promise<string>;

  MAX_WEIGHT(overrides?: CallOverrides): Promise<number>;

  "MAX_WEIGHT()"(overrides?: CallOverrides): Promise<number>;

  addNewCollateralType(
    _collateral: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addNewCollateralType(address)"(
    _collateral: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculatePoolBal(overrides?: CallOverrides): Promise<BigNumber>;

  "calculatePoolBal()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePurchase(
    _dollarAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePurchase(uint256)"(
    _dollarAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePurchaseReturn(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _depositAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _depositAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSale(
    _stockAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSale(uint256)"(
    _stockAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSaleReturn(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _sellAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _sellAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralCount(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  collateralTypes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "collateralTypes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  connectorWeight(overrides?: CallOverrides): Promise<number>;

  "connectorWeight()"(overrides?: CallOverrides): Promise<number>;

  divisor(overrides?: CallOverrides): Promise<BigNumber>;

  "divisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  fractionalReserveValue(overrides?: CallOverrides): Promise<BigNumber>;

  "fractionalReserveValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundWithdrawl(
    _to: string,
    _type: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fundWithdrawl(address,uint256,uint256)"(
    _to: string,
    _type: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  percent(overrides?: CallOverrides): Promise<BigNumber>;

  "percent()"(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseStock(
    _amount: BigNumberish,
    _tokenType: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseStock(uint256,uint256)"(
    _amount: BigNumberish,
    _tokenType: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  refundRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "refundRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sellStock(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellStock(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUp(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "setUp()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DC(overrides?: CallOverrides): Promise<string>;

    "DC()"(overrides?: CallOverrides): Promise<string>;

    DD(overrides?: CallOverrides): Promise<string>;

    "DD()"(overrides?: CallOverrides): Promise<string>;

    DS(overrides?: CallOverrides): Promise<string>;

    "DS()"(overrides?: CallOverrides): Promise<string>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<number>;

    "MAX_WEIGHT()"(overrides?: CallOverrides): Promise<number>;

    addNewCollateralType(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addNewCollateralType(address)"(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePoolBal(overrides?: CallOverrides): Promise<BigNumber>;

    "calculatePoolBal()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePurchase(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePurchase(uint256)"(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSale(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSale(uint256)"(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralCount(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "collateralTypes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    connectorWeight(overrides?: CallOverrides): Promise<number>;

    "connectorWeight()"(overrides?: CallOverrides): Promise<number>;

    divisor(overrides?: CallOverrides): Promise<BigNumber>;

    "divisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    fractionalReserveValue(overrides?: CallOverrides): Promise<BigNumber>;

    "fractionalReserveValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundWithdrawl(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "fundWithdrawl(address,uint256,uint256)"(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    "percent()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseStock(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseStock(uint256,uint256)"(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "refundRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sellStock(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "sellStock(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    "setUp()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FundWithdrawl(dollarAmount: null, tokenType: null): EventFilter;

    NewCollateral(collateral: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    StockPurchased(
      dollarAmount: null,
      stockAmount: null,
      buyer: null
    ): EventFilter;

    StockSold(
      dollarAmount: null,
      stockAmount: null,
      reserveAmountAdded: null,
      seller: null
    ): EventFilter;
  };

  estimateGas: {
    DC(overrides?: CallOverrides): Promise<BigNumber>;

    "DC()"(overrides?: CallOverrides): Promise<BigNumber>;

    DD(overrides?: CallOverrides): Promise<BigNumber>;

    "DD()"(overrides?: CallOverrides): Promise<BigNumber>;

    DS(overrides?: CallOverrides): Promise<BigNumber>;

    "DS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addNewCollateralType(
      _collateral: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addNewCollateralType(address)"(
      _collateral: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculatePoolBal(overrides?: CallOverrides): Promise<BigNumber>;

    "calculatePoolBal()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePurchase(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePurchase(uint256)"(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSale(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSale(uint256)"(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralCount(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralTypes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectorWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "connectorWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    divisor(overrides?: CallOverrides): Promise<BigNumber>;

    "divisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    fractionalReserveValue(overrides?: CallOverrides): Promise<BigNumber>;

    "fractionalReserveValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundWithdrawl(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fundWithdrawl(address,uint256,uint256)"(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    "percent()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseStock(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchaseStock(uint256,uint256)"(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    refundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "refundRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sellStock(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "sellStock(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUp(overrides?: PayableOverrides): Promise<BigNumber>;

    "setUp()"(overrides?: PayableOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_WEIGHT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNewCollateralType(
      _collateral: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addNewCollateralType(address)"(
      _collateral: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculatePoolBal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculatePoolBal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchase(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePurchase(uint256)"(
      _dollarAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSale(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSale(uint256)"(
      _stockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralTypes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "connectorWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "divisor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fractionalReserveValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fractionalReserveValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundWithdrawl(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fundWithdrawl(address,uint256,uint256)"(
      _to: string,
      _type: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "percent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseStock(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseStock(uint256,uint256)"(
      _amount: BigNumberish,
      _tokenType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    refundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "refundRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sellStock(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellStock(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUp(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "setUp()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
