/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DScoreInterface extends ethers.utils.Interface {
  functions: {
    "calculateVotingPower(address)": FunctionFragment;
    "checkStaked(address)": FunctionFragment;
    "dc()": FunctionFragment;
    "decreaseDScore(address,uint256,uint256)": FunctionFragment;
    "ds()": FunctionFragment;
    "getDscore(address)": FunctionFragment;
    "increaseDScore(address,uint256,uint256)": FunctionFragment;
    "members(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDC(address)": FunctionFragment;
    "stakeMembership(uint256)": FunctionFragment;
    "stakedCounter()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateVotingPower",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "checkStaked", values: [string]): string;
  encodeFunctionData(functionFragment: "dc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseDScore",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ds", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDscore", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseDScore",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDC", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeMembership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDscore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseDScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DScoreDecreased(address,uint256,uint256)": EventFragment;
    "DScoreIncreased(address,uint256,uint256)": EventFragment;
    "Memberfrozen(address,uint256)": EventFragment;
    "MembershipStaked(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DScoreDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DScoreIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Memberfrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DScore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DScoreInterface;

  functions: {
    calculateVotingPower(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateVotingPower(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkStaked(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    "checkStaked(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dc(overrides?: CallOverrides): Promise<[string]>;

    "dc()"(overrides?: CallOverrides): Promise<[string]>;

    decreaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ds(overrides?: CallOverrides): Promise<[string]>;

    "ds()"(overrides?: CallOverrides): Promise<[string]>;

    getDscore(
      _member: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    "getDscore(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    increaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDC(_dCore: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setDC(address)"(
      _dCore: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeMembership(
      _stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeMembership(uint256)"(
      _stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakedCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakedCounter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  calculateVotingPower(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateVotingPower(address)"(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkStaked(_member: string, overrides?: CallOverrides): Promise<boolean>;

  "checkStaked(address)"(
    _member: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dc(overrides?: CallOverrides): Promise<string>;

  "dc()"(overrides?: CallOverrides): Promise<string>;

  decreaseDScore(
    _member: string,
    _factor: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseDScore(address,uint256,uint256)"(
    _member: string,
    _factor: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ds(overrides?: CallOverrides): Promise<string>;

  "ds()"(overrides?: CallOverrides): Promise<string>;

  getDscore(
    _member: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      level: BigNumber;
      jobs: BigNumber;
      votes: BigNumber;
      reputation: BigNumber;
      staked: BigNumber;
      verified: BigNumber;
      audit: BigNumber;
    }
  >;

  "getDscore(address)"(
    _member: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      level: BigNumber;
      jobs: BigNumber;
      votes: BigNumber;
      reputation: BigNumber;
      staked: BigNumber;
      verified: BigNumber;
      audit: BigNumber;
    }
  >;

  increaseDScore(
    _member: string,
    _factor: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseDScore(address,uint256,uint256)"(
    _member: string,
    _factor: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      level: BigNumber;
      jobs: BigNumber;
      votes: BigNumber;
      reputation: BigNumber;
      staked: BigNumber;
      verified: BigNumber;
      audit: BigNumber;
    }
  >;

  "members(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      level: BigNumber;
      jobs: BigNumber;
      votes: BigNumber;
      reputation: BigNumber;
      staked: BigNumber;
      verified: BigNumber;
      audit: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDC(_dCore: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setDC(address)"(
    _dCore: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeMembership(
    _stakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeMembership(uint256)"(
    _stakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakedCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "stakedCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateVotingPower(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateVotingPower(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkStaked(_member: string, overrides?: CallOverrides): Promise<boolean>;

    "checkStaked(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dc(overrides?: CallOverrides): Promise<string>;

    "dc()"(overrides?: CallOverrides): Promise<string>;

    decreaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ds(overrides?: CallOverrides): Promise<string>;

    "ds()"(overrides?: CallOverrides): Promise<string>;

    getDscore(
      _member: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    "getDscore(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    increaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        level: BigNumber;
        jobs: BigNumber;
        votes: BigNumber;
        reputation: BigNumber;
        staked: BigNumber;
        verified: BigNumber;
        audit: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDC(_dCore: string, overrides?: CallOverrides): Promise<void>;

    "setDC(address)"(_dCore: string, overrides?: CallOverrides): Promise<void>;

    stakeMembership(
      _stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeMembership(uint256)"(
      _stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "stakedCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DScoreDecreased(
      member: null,
      factor: null,
      amountDecreased: null
    ): EventFilter;

    DScoreIncreased(
      member: null,
      factor: null,
      amountIncreased: null
    ): EventFilter;

    Memberfrozen(member: null, timeFrozen: null): EventFilter;

    MembershipStaked(member: null, amountStaked: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    calculateVotingPower(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateVotingPower(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkStaked(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    "checkStaked(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dc(overrides?: CallOverrides): Promise<BigNumber>;

    "dc()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ds(overrides?: CallOverrides): Promise<BigNumber>;

    "ds()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDscore(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDscore(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDC(_dCore: string, overrides?: Overrides): Promise<BigNumber>;

    "setDC(address)"(_dCore: string, overrides?: Overrides): Promise<BigNumber>;

    stakeMembership(
      _stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeMembership(uint256)"(
      _stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakedCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "stakedCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateVotingPower(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateVotingPower(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkStaked(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkStaked(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDscore(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDscore(address)"(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDScore(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseDScore(address,uint256,uint256)"(
      _member: string,
      _factor: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDC(_dCore: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setDC(address)"(
      _dCore: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeMembership(
      _stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeMembership(uint256)"(
      _stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakedCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakedCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
